// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name        String   @unique
  title       String
  coursePage  String?  @map("course_page")
  description String?
  tablerIcon  String?  @map("tabler_icon") @db.VarChar(32)
  prompts     Prompt[]

  @@map("courses")
}

enum PromptType {
  SUMMARY
  QUIZ
  ASSIGNMENT
  FLASHCARDS
  EXPLAINER
}

model Prompt {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title   String
  content Json   @db.JsonB

  /// What type this prompt is. Determines the structure of the content data.
  type      PromptType
  /// If this prompt has been pinned to appear at the top of the list.
  pinned    Boolean    @default(false)
  /// If the user has published this prompt and therefore made it publicly visible to others
  published Boolean    @default(false)

  userId String @map("user_id") @db.Uuid
  /// The user who made this prompt
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  courseId String @map("course_id") @db.Uuid
  /// The course this prompt belongs to
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  /// Teacher note for this prompt.
  teacherNote TeacherNote?

  reactions PromptReaction[]

  @@index([type])
  @@index([courseId])
  @@index([pinned, courseId])
  @@index([type, courseId])
  @@map("prompts")
}

model PromptReaction {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId String @map("user_id") @db.Uuid
  /// The user who made this prompt
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  promptId String @map("prompt_id") @db.Uuid
  /// The quiz prompt this reaction is for
  prompt   Prompt @relation(fields: [promptId], references: [id], onDelete: Cascade)

  /// Whether the reaction is positive or not.
  positive Boolean

  @@unique([promptId, userId])
  @@index([promptId, positive])
  @@map("prompt_reactions")
}

model Account {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessionToken String   @unique
  expires      DateTime

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum UserType {
  STUDENT
  TEACHER
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type UserType @default(STUDENT)

  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  openAI        OpenAI?
  accounts      Account[]
  sessions      Session[]

  prompts         Prompt[]
  promptReactions PromptReaction[]
  TeacherNote     TeacherNote[]

  @@map("users")
}

model OpenAI {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  /// If the user has enabled to use OpenAI for AI generation.
  enabled Boolean @default(false) @map("enabled")
  /// Encrypted JWT of the user OpenAI api key.
  apiKey  String? @map("api_key") @db.VarChar(512)
  /// The user this OpenAI setting is for.
  user    User    @relation(fields: [userId], references: [id])
  userId  String  @unique @map("user_id") @db.Uuid

  @@map("open_ai")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model TeacherNote {
  /// The prompt this teacher note is for. 
  prompt   Prompt @relation(fields: [promptId], references: [id])
  /// Used as id since there only can be one note per prompt.
  promptId String @id @map("prompt_id") @db.Uuid

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  /// The user this teacher note was created by.
  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id") @db.Uuid

  /// The title of the note.
  title String
  /// The text of the note.
  text  String
}
