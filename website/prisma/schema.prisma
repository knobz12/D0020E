// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id   String @id @default(uuid()) @db.Uuid
  name String

  quizPrompts    QuizPrompt[]
  summaryPrompts SummaryPrompt[]
  /// ... more prompts

  @@map("courses")
}

model QuizPrompt {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title   String
  content Json

  userId String @map("user_id") @db.Uuid
  /// The user who made this prompt
  user   User   @relation(fields: [userId], references: [id])

  courseId String @map("course_id") @db.Uuid
  /// The course this prompt belongs to
  course   Course @relation(fields: [courseId], references: [id])

  reactions QuizPromptReaction[]

  @@map("quiz_prompts")
}

model QuizPromptReaction {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @map("user_id") @db.Uuid
  /// The user who made this prompt
  user   User   @relation(fields: [userId], references: [id])

  quizPromptId String     @db.Uuid
  /// The quiz prompt this reaction is for
  quizPrompt   QuizPrompt @relation(fields: [quizPromptId], references: [id])

  /// Whether the reaction is positive or not.
  positive Boolean

  @@unique([quizPromptId, userId])
}

model SummaryPrompt {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title   String
  content String

  userId String @map("user_id") @db.Uuid
  /// The user who made this prompt
  user   User   @relation(fields: [userId], references: [id])

  courseId String @map("course_id") @db.Uuid
  /// The course this prompt belongs to
  course   Course @relation(fields: [courseId], references: [id])

  reactions SummaryPromptReaction[]

  @@map("summary_prompts")
}

model SummaryPromptReaction {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @map("user_id") @db.Uuid
  /// The user who made this prompt
  user   User   @relation(fields: [userId], references: [id])

  summaryPromptId String        @db.Uuid
  /// The summary prompt this reaction is for
  summaryPrompt   SummaryPrompt @relation(fields: [summaryPromptId], references: [id])

  positive Boolean

  @@unique([summaryPromptId, userId])
}

/// Explanation prompt
/// Flashcard prompt
/// Assignment prompt

model Account {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessionToken String   @unique
  expires      DateTime

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  quizes    QuizPrompt[]
  summaries SummaryPrompt[]

  quizReactions    QuizPromptReaction[]
  summaryReactions SummaryPromptReaction[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
